{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["styles","imageinput","cursor","position","top","bottom","right","left","width","opacity","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","snackbar","image","prediction","preview","apicall","bind","assertThisInitialized","selectImage","closeSnackbar","imagedata","$","ajax","url","concat","method","data","JSON","stringify","then","response","textStatus","xhr","status","catch","error","console","statusText","id","t","reader","FileReader","readAsDataURL","target","files","onload","el","result","replace","setState","_ref","resp_data","err","message","react_default","a","createElement","MuiThemeProvider_default","class","Card","src","alt","title","RaisedButton_default","primary","label","containerElement","style","type","accept","onChange","LinearProgress_default","mode","Snackbar_default","open","autoHideDuration","onRequestClose","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cf693bf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Card, CardActions, CardMedia, CardTitle} from 'material-ui/Card';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Snackbar from 'material-ui/Snackbar';\nimport LinearProgress from 'material-ui/LinearProgress';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport $ from 'jquery';\n\nlet APP_URL = 'http://127.0.0.1:8000/identify'\n\nconst styles = {\n  imageinput: {\n    cursor: 'pointer',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    width: '100%',\n    opacity: 0,\n  },\n};\n\n\nexport default class App extends Component {\n\n  constructor() {\n      super();\n      this.state = {\n        loading:false,\n        snackbar:false,\n        image:null,\n        prediction:'Select an image to see what it holds',\n        preview:'./static/nn.png',\n      }\n    this.apicall = this.apicall.bind(this)\n    this.selectImage = this.selectImage.bind(this)\n    this.closeSnackbar = this.closeSnackbar.bind(this)\n    }\n\n  apicall(imagedata) {\n   return $.ajax({\n      url: `${APP_URL}`,\n      method: 'POST',\n      data: JSON.stringify({ image: imagedata }),\n      // headers: {\n      //     'authorization': auth,\n      //     'Content-Type': 'application/json',\n      // },\n    }).then((response, textStatus, xhr) => {\n      return { response, status: xhr.status };\n    }).catch((error) => {\n      console.error(error.statusText , error.status);\n    });\n }\n  \n  selectImage(id) {\n      let t = this;\n      var reader = new FileReader();\n      reader.readAsDataURL(id.target.files[0]);\n      // var image = id.target.files[0];\n      // var name = image.name;\n\n      reader.onload = function(el) {\n          var imagedata = el.target.result.replace(/^data:image\\/(png|jpg|jpeg);base64,/, \"\");\n          \n          t.setState({prediction:'Analyzing...',\n                      preview: el.target.result,\n                      loading:true})\n          \n          t.apicall(imagedata)\n            .then(({ response, status }) => {\n              if (status !== 200) {\n                t.setState({loading: false,\n                            snackbar: true,\n                            prediction: 'Please select another image'})\n              }\n              else {\n                t.setState({loading: false,\n                            prediction: response.resp_data})\n              }\n            })\n            .catch(err => {\n              console.error(err.message);\n            })\n      }\n    }\n\n  closeSnackbar(){\n    this.setState({snackbar:false})\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <div class='flex-container'>\n            <Card>\n              <CardMedia class='image-container'>\n                <img src={this.state.preview} alt=\"\"/>\n              </CardMedia>\n              <CardTitle title={this.state.prediction}/>\n              <CardActions>\n                <RaisedButton\n                  class='button'\n                  primary={true}\n                  label=\"Choose an Image\"\n                  containerElement=\"label\">\n                    <input style={styles.imageinput} type=\"file\" accept=\"image/*\" onChange={this.selectImage} />\n                </RaisedButton>\n              </CardActions>\n              {this.state.loading ? <LinearProgress mode=\"indeterminate\" /> : null}\n            </Card>\n          </div>\n          <Snackbar\n            open={this.state.snackbar}\n            message='Bad image'\n            autoHideDuration={4000}\n            onRequestClose={this.closeSnackbar}/>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}